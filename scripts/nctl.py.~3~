#!/usr/bin/python
import rospy
import tf
import math
import sys

import std_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from sensor_msgs.msg import PointCloud2
import sensor_msgs.point_cloud2 as pcl2

import matplotlib.pyplot as plt
import numpy as np
from odometry import odome
from glob import glob
import os, sys

__author__ = "maxtom"
__email__ = "hitmaxtom@gmail.com"

def talker():
    rospy.init_node('nctl_pub', anonymous=True)
    pub = rospy.Publisher('/nctl_odom/cloud', PointCloud2, queue_size=10)
    rate = rospy.Rate(10)
    header = std_msgs.msg.Header()
    header.frame_id = 'base_link'

    # Change this to the directory where you store KITTI data
    basedir = '2012-01-08/velodyne_sync/'

    # Specify the dataset to load
    sequence = '00'

    files = glob(os.path.join(basedir, "sequence/", sequence, "/velodyne/*.bin"))
    
    # Optionally, specify the frame range to load
    frame_range = range(5, len(files)-5, 1)
    
    # Load the data
    # dataset = pykitti.odometry(basedir, sequence)
    dataset = odome(basedir, sequence, frame_range)
    np.set_printoptions(precision=4, suppress=True)
    
    # Load some data
    #dataset.load_calib()        # Calibration data are accessible as named tuples
    #dataset.load_timestamps()   # Timestamps are parsed into timedelta objects
    dataset.load_poses()        # Ground truth poses are loaded as 4x4 arrays
    dataset.load_velo()         # Each scan is a Nx4 array of [x,y,z,reflectance]
    
    id=0
    while not rospy.is_shutdown():
        header.stamp = rospy.Time.now()

        cloud = pcl2.create_cloud_xyz32(header, dataset.load_scan(id)[:,:-1])
        pose  = dataset.load_pose(id)

        # Publish Tf
        br = tf.TransformBroadcaster()
        br.sendTransform((pose[0,3], pose[1,3], pose[2,3]),
                         tf.transformations.quaternion_from_matrix(pose),
                         rospy.Time.now(),
                         "cam", "cam_world")

        rospy.loginfo("new data")
        # Publish cloud
        pub.publish(cloud)
        id=id+1
        if id > 6000:
            break
            rate.sleep()
            
    rospy.loginfo("done loop")

if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass
